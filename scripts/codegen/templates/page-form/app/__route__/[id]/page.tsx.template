import { notFound } from "next/navigation";

import BreadCrumb from "@/components/layout/breadcrumb";
import InfoContainer from "@/components/layout/info-container";
import { Heading } from "@/components/ui/heading";
import { Separator } from "@/components/ui/separator";
import { use<%= pascalCase(singular(module)) %>Query } from "@/graphql";
import <%= pascalCase(singular(module)) %>Form from "@/modules/<%= kebabCase(singular(module)) %>/<%= kebabCase(singular(module)) %>-form";
import type { PageProps } from "@/types";

export async function generateMetadata({ params }: PageProps<{ id: string }>) {
  return {
    title: params?.id === "new" ? "New <%= pascalCase(singular(module)) %>" : "Edit <%= pascalCase(singular(module)) %>",
  };
}
export default async function Page({ params }: PageProps<{ id: string }>) {
  const id = params?.id;
  const isNew = id === "new";

  const getRecord = async () => {
    "use server";
    if (isNew) return undefined;
    try {
      const query = await use<%= pascalCase(singular(module)) %>Query.fetcher({ where: { id: Number(id) } })();
      return query.<%= camelCase(singular(module)) %>;
    } catch (_e) {
      notFound();
    }
  };
  const record = await getRecord();
  if (!isNew && !record) notFound();

  return (
    <InfoContainer>
      <BreadCrumb
        items={[
          { title: "<%= pascalCase(plural(module)) %>", href: "<%= parsedRoute %>" },
          isNew ? { title: "New" } : { title: "Edit" },
        ]}
      />

      <div className="flex items-start justify-between">
        <Heading module="<%= pascalCase(singular(module)) %>" type={isNew ? "create" : "edit"} />
      </div>

      <Separator />

      <<%= pascalCase(singular(module)) %>Form mode={isNew ? "create" : "edit"} record={record || undefined} />
    </InfoContainer>
  );
}

{
	// Place your 101kerja-admin-web workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	"Basic Form Component": {
		"scope": "typescriptreact",
		"prefix": "gencomform",
		"body": [
			"\"use client\";",
			"",
			"import { zodResolver } from \"@hookform/resolvers/zod\";",
			"import { useState } from \"react\";",
			"import { type SubmitErrorHandler, useForm } from \"react-hook-form\";",
			"import { toast } from \"sonner\";",
			"import z from \"zod\";",
			"",
			"import FormTextInput from \"@/components/common/form-text-input\";",
			"import { Button } from \"@/components/ui/button\";",
			"import { Form } from \"@/components/ui/form\";",
			"import { useConfirmModal } from \"@/context/confirm-modal-context\";",
			"import validator from \"@/lib/form-validator\";",
			"import { parseErrorMessage } from \"@/lib/utils\";",
			"",
			"const formSchema = z.object({",
			"  name: validator.string(\"Name\"),",
			"});",
			"",
			"type FormValues = z.infer<typeof formSchema>;",
			"",
			"export function ${1:Edit}Form() {",
			"  const [submitting, setSubmitting] = useState(false);",
			"  const { confirm } = useConfirmModal();",
			"",
			"  const form = useForm<FormValues>({",
			"    resolver: zodResolver(formSchema),",
			"    defaultValues: { name: \"\" },",
			"  });",
			"",
			"  const onConfirm = async (_formValues: FormValues) => {",
			"    setSubmitting(true);",
			"    try {",
			"      // TODO: Implement logic",
			"      form.reset();",
			"      toast.success(\"Success\");",
			"    } catch (e) {",
			"      toast.error(parseErrorMessage(e));",
			"    }",
			"    setSubmitting(false);",
			"  };",
			"",
			"  const onFormSubmit = async (formValues: FormValues) => {",
			"    confirm?.({",
			"      title: \"Submit Confirmation\",",
			"      description: \"You are about to submit form?\",",
			"      onConfirm: () => onConfirm(formValues),",
			"      onCancel: () => form.reset(),",
			"    });",
			"  };",
			"",
			"  const onFormError: SubmitErrorHandler<FormValues> = (e) => {",
			"    Object.values(e).map((e) => toast.error(e.message));",
			"  };",
			"",
			"  return (",
			"    <Form {...form}>",
			"      <form onSubmit={form.handleSubmit(onFormSubmit, onFormError)} className=\"grid w-full gap-4 space-y-2\">",
			"        <FormTextInput control={form.control} name=\"name\" label=\"Name\" disabled={submitting} />",
			"",
			"        <div>",
			"          <Button loading={submitting} type=\"submit\" disabled={!form.formState.isDirty}>",
			"            Submit",
			"          </Button>",
			"        </div>",
			"      </form>",
			"    </Form>",
			"  );",
			"}",
			"",
			"export default ${2:Edit}Form;",
			"$3"
		],
		"description": "Generate basic form component"
	}
}
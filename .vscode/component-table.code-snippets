{
	// Place your 101kerja-admin-web workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	"Table Component": {
		"scope": "typescriptreact",
		"prefix": "gencomtable",
		"body": [
			"\"use client\";",
			"",
			"import { useRouter } from \"next-nprogress-bar\";",
			"import { type ReadonlyURLSearchParams, useSearchParams } from \"next/navigation\";",
			"import { useMemo, useRef } from \"react\";",
			"import { toast } from \"sonner\";",
			"",
			"import { type DataTableRef, createDataTable } from \"@/components/common/data-table\";",
			"import { useConfirmModal } from \"@/context/confirm-modal-context\";",
			"import { type InputMaybe, SortOrder } from \"@/graphql\";",
			"import { useAuthSession } from \"@/lib/auth/client\";",
			"import { getListingQueryParams } from \"@/lib/query-router\";",
			"import { parseErrorMessage } from \"@/lib/utils\";",
			"import { columns } from \"./user-columns\";",
			"",
			"type Record = ${1:User}Fragment;",
			"const DataTable = createDataTable<Record, Record>();",
			"",
			"export default function UserTable() {",
			"  const _router = useRouter();",
			"  const searchParams = useSearchParams();",
			"  const session = useAuthSession();",
			"",
			"  const ref = useRef<DataTableRef<Record>>(null);",
			"  const { confirmDelete } = useConfirmModal();",
			"",
			"  const authId = session?.user?.id as number;",
			"",
			"  const queryOptions = useMemo(() => getQueryOptions(searchParams, authId), [searchParams, authId]);",
			"  const query = useUsersQuery(queryOptions);",
			"",
			"  const data = query.data?.users.data;",
			"  const total = query.data?.users.total || 0;",
			"",
			"  const onEdit = (_record: Record) => {",
			"    // Implement edit logic",
			"  };",
			"",
			"  const onDelete = (record: Record) => {",
			"    confirmDelete({",
			"      presetDesc: { label: \"user\", value: record.email },",
			"      onConfirm: async () => {",
			"        try {",
			"          // TODO: Implement delete logic",
			"          toast.success(\"User deleted successfully\");",
			"          query.refetch();",
			"        } catch (e) {",
			"          toast.error(parseErrorMessage(e));",
			"        }",
			"      },",
			"    });",
			"  };",
			"",
			"  const tableColumns = columns({ onEdit, onDelete });",
			"",
			"  return (",
			"    <DataTable",
			"      loading={query.isFetching}",
			"      selectable={false}",
			"      ref={ref}",
			"      columns={tableColumns}",
			"      total={total}",
			"      data={data || []}",
			"    />",
			"  );",
			"}",
			"",
			"const getQueryOptions = (searchParams: ReadonlyURLSearchParams, authId: number) => {",
			"  const { from, to, sortBy, direction, limit, offset } = getListingQueryParams(searchParams, \"client\");",
			"  const keyword = searchParams.get(\"keyword\");",
			"",
			"  const where: InputMaybe<UserWhereInput> = {",
			"    id: { not: { equals: authId } },",
			"    AND: [],",
			"  };",
			"",
			"  if (from) where.AND?.push({ createdAt: { gte: from } });",
			"  if (to) where.AND?.push({ createdAt: { lte: to } });",
			"  if (keyword) where.AND?.push({ name: { contains: keyword } });",
			"",
			"  const orderBy: InputMaybe<UserOrderByWithRelationInput> = sortBy ? { [sortBy]: direction } : { name: SortOrder.Asc };",
			"",
			"  return { where, orderBy, take: limit, skip: offset };",
			"};",
			"$2"
		],
		"description": "Generate a table component"
	}
}